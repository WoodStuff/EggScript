using EggScript.Exceptions;
using EggScript.Parsing.Nodes.Expression;
using EggScript.Parsing.Nodes.Expression.Data;
using EggScript.Parsing.Nodes.Statement;
using EggScript.Tokenization;

namespace EggScript.Parsing;

/// <summary>
/// Parses the source code's tokens into an abstract syntax tree.
/// </summary>
/// <param name="_tokens">The source code's tokens, generated by the <see cref="Tokenizer"/>.</param>
internal partial class Parser(List<Token> _tokens)
{
	#region Fields
	private static readonly string[] booleans = ["true", "false"];
	private static readonly Dictionary<int, string[]> operators = new()
	{
		{ 0, ["="] },
		{ 1, ["&"] },
		{ 2, ["|"] },
		{ 3, ["==", "!="] },
		{ 4, [">=", "<=", ">", "<"] },
		{ 5, ["+", "-"] },
		{ 6, ["*", "/"] },
	};
	private static readonly string[] unaryOperators = ["+", "-", "!"];
	private static readonly string[] keywordsNoSemicolons = ["if"];
	#endregion

	#region Properties
	/// <summary>
	/// The source code's tokens, generated by the <see cref="Tokenizer"/>.
	/// </summary>
	private List<Token> Tokens { get; } = _tokens;
	/// <summary>
	/// The index of the token next in the queue.
	/// </summary>
	private int Index { get; set; } = 0;
	/// <summary>
	/// The token to be read next.
	/// </summary>
	private Token CurrentToken => Tokens[Index];
	#endregion

	#region Parsing Methods
	/// <summary>
	/// Parses the <see cref="Tokens"/> into an abstract syntax tree.
	/// </summary>
	/// <returns>A list of nodes made from the tokens.</returns>
	public List<IStatementNode> Parse()
	{
		List<IStatementNode> nodes = [];
		while (!Match(TokenType.EOF, out _))
		{
			nodes.Add(ParseStatement());
		}
		return nodes;
	}

	/// <summary>
	/// Parses a statement.
	/// </summary>
	/// <returns>The node corresponding to that statement.</returns>
	/// <exception cref="EggSyntaxException">Thrown when a syntax error is detected.</exception>
	private IStatementNode ParseStatement()
	{
		IStatementNode node;

		if (Match(TokenType.Keyword, out string keyword)) node = ParseKeywordStatement(keyword);
		else
		{
			IExpressionNode expr = ParseExpression();
			node = ParseExprStatement(expr);
		}

		if (!keywordsNoSemicolons.Contains(keyword) && !Match(TokenType.Punctuation, ";")) Throw_Expected(Next().Value, ";");

		return node;
	}

	/// <summary>
	/// Parses a statement starting from a keyword.
	/// </summary>
	/// <param name="keyword">The keyword the statement starts from.</param>
	/// <returns>The node corresponding to that statement.</returns>
	/// <exception cref="EggSyntaxException">Thrown when a syntax error is detected.</exception>
	private IStatementNode ParseKeywordStatement(string keyword)
	{
		IStatementNode node;
		switch (keyword)
		{
			case "print":
			{
				Expect(TokenType.Punctuation, "(");

				IExpressionNode data = ParseExpression();
				node = new PrintNode(data);

				Expect(TokenType.Punctuation, ")");
				break;
			}

			case "string":
			case "num":
			case "bool":
			{
				Expect(TokenType.Identifier, out string name);

				DataType type = TypeFromString(keyword);

				if (!Match(TokenType.Operator, "=")) // undeclared variable
				{
					node = new VarDeclarationNode(name, type);
					break;
				}

				IExpressionNode data = ParseExpression();
				node = new VarDeclarationNode(name, type, data);
				break;
			}

			case "const":
			{
				if (!Match(TokenType.Keyword, out string type)) Throw_Expected(Next().Value, "Data type");

				node = ParseKeywordStatement(type);
				if (node is not VarDeclarationNode decl) throw new EggSyntaxException("The const keyword can only be applied to variable declarations");
				if (!decl.Initialized) throw new EggSyntaxException($"Constant variable {decl.Name} must be initialized");

				decl.Constant = true;
				node = decl;

				break;
			}

			case "if":
			{
				Expect(TokenType.Punctuation, "(");
				IExpressionNode condition = ParseExpression();
				Expect(TokenType.Punctuation, ")");

				List<IStatementNode> block = Match(TokenType.Punctuation, "{") ? ParseBlock() : [ParseStatement()];

				List<IStatementNode>? otherwise = null;
				if (Match(TokenType.FreeKeyword, "else"))
				{
					otherwise = Match(TokenType.Punctuation, "{") ? ParseBlock() : [ParseStatement()];
				}

				node = new ConditionalNode(condition, block, otherwise);

				break;
			}

			default:
				throw new EggSyntaxException($"Keyword {keyword} is not implemented");
		}
		return node;
	}

	/// <summary>
	/// Parses a statement that is an expression, like a variable assignment statement.
	/// </summary>
	/// <param name="expr">The statement's expression.</param>
	/// <returns>The node corresponding to that statement.</returns>
	/// <exception cref="EggSyntaxException">Thrown when a syntax error is detected.</exception>
	private static IStatementNode ParseExprStatement(IExpressionNode expr)
	{
		IStatementNode node;
		if (expr is OperatorNode { Left: IdentifierNode var } operatorNode && operatorNode.Operator == "=")
		{
			node = new VarAssignmentNode(var.Name, operatorNode.Right);
		}
		else throw new EggSyntaxException("Only keywords or assignment expressions can be used as a statement");
		return node;
	}

	/// <summary>
	/// Parses an expression.
	/// </summary>
	/// <returns>The node corresponding to that expression.</returns>
	private IExpressionNode ParseExpression()
	{
		IExpressionNode data = ParseOperator();
		return data;
	}

	/// <summary>
	/// Parses an expression that may contain operators.
	/// </summary>
	/// <param name="level">The operator precedence level to start at.</param>
	/// <returns>The node corresponding to that expression.</returns>
	private IExpressionNode ParseOperator(int level = 0)
	{
		IExpressionNode data = GetLowerExpression(level);
		while (Match(TokenType.Operator, out string op, operators[level]))
		{
			IExpressionNode right = GetLowerExpression(level);
			data = new OperatorNode(data, op, right);
		}
		return data;

		IExpressionNode GetLowerExpression(int level)
		{
			if (level == operators.Count - 1)
			{
				return ParseUnary();
			}
			return ParseOperator(level + 1);
		}
	}

	/// <summary>
	/// Parses an expression that may contain unary operators.
	/// </summary>
	/// <returns>The node corresponding to that expression.</returns>
	private IExpressionNode ParseUnary()
	{
		IExpressionNode node;
		if (Match(TokenType.Operator, out string op, unaryOperators))
		{
			IExpressionNode value = ParseUnary();
			node = new UnaryOpNode(op, value);
			return node;
		}
		return ParsePrimary();
	}

	/// <summary>
	/// Parses some basic data, such as a string, number, identifier or a completely new expression through parentheses.
	/// </summary>
	/// <returns>The node corresponding to that data.</returns>
	private IExpressionNode ParsePrimary()
	{
		Token token = Next();

		IExpressionNode node;
		switch (token.Type)
		{
			case TokenType.String: node = new StringNode(token.Value); break;
			case TokenType.Number: node = new NumberNode(token.Value); break;
			case TokenType.Identifier: node = new IdentifierNode(token.Value); break;

			case TokenType.FreeKeyword:
				if (!booleans.Contains(token.Value)) Throw_Expected(token.Value);
				node = new BooleanNode(token.Value);
				break;

			case TokenType.Punctuation:
				if (token.Value != "(") Throw_Expected(token.Value);
				node = ParseExpression();
				Expect(TokenType.Punctuation, ")");
				break;

			default:
				Throw_Expected(token.Value);
				throw new Exception(); // required because C# doesn't realize Throw_Expected always throws
		}
		return node;
	}

	/// <summary>
	/// Parses a block statement, which is a list of statements enclosed by { }. Assumes the { was already matched.
	/// </summary>
	/// <returns>A list of statements in the block.</returns>
	private List<IStatementNode> ParseBlock()
	{
		List<IStatementNode> nodes = [];
		while (!Match(TokenType.Punctuation, "}"))
		{
			nodes.Add(ParseStatement());
		}

		return nodes;
	}
	#endregion

	#region Static Parsing Methods
	/// <summary>
	/// Parses a statement.
	/// </summary>
	/// <param name="source">The code of the statement.</param>
	/// <returns>The statement node.</returns>
	internal static IStatementNode ParseStatement(string source)
	{
		List<Token> tokens = Tokenizer.Tokenize(source);

		Parser parser = new(tokens);
		IStatementNode node = parser.ParseStatement();

		return node;
	}

	/// <summary>
	/// Parses an expression.
	/// </summary>
	/// <param name="source">The code of the expression.</param>
	/// <returns>The expression node.</returns>
	internal static IExpressionNode ParseExpression(string source)
	{
		List<Token> tokens = Tokenizer.Tokenize(source);

		Parser parser = new(tokens);
		IExpressionNode node = parser.ParseExpression();

		return node;
	}
	#endregion
}