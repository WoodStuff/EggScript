using EggScript.Exceptions;
using EggScript.Parsing;
using EggScript.Parsing.Nodes;
using EggScript.Parsing.Nodes.Expression;
using EggScript.Parsing.Nodes.Expression.Data;
using EggScript.Parsing.Nodes.Statement;

namespace EggScript.Runtime;

/// <summary>
/// Executes the EggScript program.
/// </summary>
internal static class Interpreter
{
	/// <summary>
	/// Runs an EggScript program based on the abstract syntax tree generated from the <see cref="Parser"/>.
	/// </summary>
	/// <param name="nodes">The list of nodes generated by the <see cref="Parser"/>.</param>
	/// <exception cref="EggScriptException">Thrown when an invalid node is detected.</exception>
	public static void Run(List<IStatementNode> nodes)
	{
		foreach (IStatementNode node in nodes)
		{
			switch (node)
			{
				case PrintNode printNode:
					Console.WriteLine(GetValue(printNode.Data).Value);
					break;

				default:
					throw new EggScriptException("Invalid node");
			}
		}
	}

	private static IDataNode GetValue(IExpressionNode node)
	{
		switch (node)
		{
			case IDataNode dataNode:
				return dataNode;

			case OperatorNode operatorNode:
				return ParseOperator(operatorNode);

			default:
				throw new EggScriptException("Invalid node");
		}
	}

	private static IDataNode ParseOperator(OperatorNode node)
	{
		IDataNode left = GetValue(node.Left);
		IDataNode right = GetValue(node.Right);

		switch ((left, right))
		{
			case (NumberNode l, NumberNode r):
				return new NumberNode(l.Value + r.Value);

			default:
				throw new EggScriptException("Invalid data types in operator");
		}
	}
}